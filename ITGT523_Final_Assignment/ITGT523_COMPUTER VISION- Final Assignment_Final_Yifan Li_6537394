{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "68358f35",
   "metadata": {},
   "source": [
    "# ITGT523_COMPUTER VISION_Final Assignment_Snake Game"
   ]
  },
  {
   "cell_type": "raw",
   "id": "c9fc5ca9",
   "metadata": {},
   "source": [
    "Group Members:\n",
    "\n",
    "🤓 Yifan Li_6537394 \n",
    "🤓 Xiaoke Yu_6538170"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1b3c103",
   "metadata": {},
   "source": [
    "# 想法 Idea"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83066ae7",
   "metadata": {},
   "source": [
    "![Image name](https://raw.githubusercontent.com/SPDUK/snake-elixir/master/snake.gif)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "8db3ce61",
   "metadata": {},
   "source": [
    "                                               🐍"
   ]
  },
  {
   "cell_type": "raw",
   "id": "69f1a98c",
   "metadata": {},
   "source": [
    "📋 Proposal：\n",
    "\n",
    "1, Combine Hand(Fingertips) Detection and Snake Game to make a simple computer vision game.\n",
    "2, Use finger to control the movement of the snake.\n",
    "3, Play this game with computer's camera.\n",
    "4, Use CVZone and MediaPipe to complete this project."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4653211e",
   "metadata": {},
   "source": [
    "# 游戏机制 Game Mechanics"
   ]
  },
  {
   "cell_type": "raw",
   "id": "4ebf6183",
   "metadata": {},
   "source": [
    "📋用手指检测的方式控制蛇的移动方向，去寻找可以吃的东西(五角星)，当你吃掉五角星后它就会随机在摄像头屏幕前生成一个新的，玩家每吃一个五角星获得1分，吃得越多蛇的身体就越长，游戏难度随蛇的身体变长而加大，玩家操作的蛇不能咬到自己的身体和尾巴，否则游戏结束。\n",
    "\n",
    "📋Use hand tip detection method to control the moving direction of the snake, looking for something(Star) to eat, Every time you eat a star, it will be randomly generated on the screen of the webcam, player can get 1 score for each bite, and the snake's body will become longer and longer as you eat more, the difficulty of the game will become more difficult as the body of the snake grows longer, the snake operated by the player cannot bite its own body and tail, otherwise the game is over."
   ]
  },
  {
   "cell_type": "raw",
   "id": "b81cbe60",
   "metadata": {},
   "source": [
    "👇Items that snakes eat (stars)👇    Each +1 score 💬"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f9ed969",
   "metadata": {},
   "source": [
    "![Image name](https://i.328888.xyz/2023/03/15/JiKuo.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cc15952",
   "metadata": {},
   "source": [
    "# 0 下载组件 Install components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5463cd5a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: cvzone in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (1.5.6)\n",
      "Requirement already satisfied: numpy in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from cvzone) (1.19.5)\n",
      "Requirement already satisfied: opencv-python in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from cvzone) (4.6.0.66)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install cvzone"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bd3a55ea",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: OpenCV-python in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (4.6.0.66)\n",
      "Requirement already satisfied: numpy>=1.14.5 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from OpenCV-python) (1.19.5)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install OpenCV-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b3b0e984",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: mediapipe in c:\\users\\78089\\appdata\\roaming\\python\\python39\\site-packages (0.9.1.0)\n",
      "Requirement already satisfied: attrs>=19.1.0 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from mediapipe) (22.1.0)\n",
      "Requirement already satisfied: numpy in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from mediapipe) (1.19.5)\n",
      "Requirement already satisfied: absl-py in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from mediapipe) (0.15.0)\n",
      "Requirement already satisfied: protobuf<4,>=3.11 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from mediapipe) (3.19.6)\n",
      "Requirement already satisfied: opencv-contrib-python in c:\\users\\78089\\appdata\\roaming\\python\\python39\\site-packages (from mediapipe) (4.7.0.68)\n",
      "Requirement already satisfied: flatbuffers>=2.0 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from mediapipe) (23.1.21)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from mediapipe) (3.6.2)\n",
      "Requirement already satisfied: six in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from absl-py->mediapipe) (1.15.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from matplotlib->mediapipe) (1.4.4)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from matplotlib->mediapipe) (2.8.2)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from matplotlib->mediapipe) (22.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from matplotlib->mediapipe) (4.38.0)\n",
      "Requirement already satisfied: pillow>=6.2.0 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from matplotlib->mediapipe) (9.3.0)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from matplotlib->mediapipe) (3.0.9)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from matplotlib->mediapipe) (0.11.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\78089\\anaconda3\\envs\\python3\\lib\\site-packages (from matplotlib->mediapipe) (1.0.6)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install mediapipe --user"
   ]
  },
  {
   "cell_type": "raw",
   "id": "98572c1d",
   "metadata": {},
   "source": [
    "📋 Please note that \"pip install mediapipe\" may not be able to run directly in anaconda3, just add \"-user\" after it."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9883fac5",
   "metadata": {},
   "source": [
    "# 1 贪吃蛇游戏 Snake Game"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "27aaf2ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import random\n",
    "import cvzone\n",
    "import cv2\n",
    "import numpy as np\n",
    "from cvzone.HandTrackingModule import HandDetector\n",
    "\n",
    "#我们需要使用cvzone和MediaPipe在这个项目中 \n",
    "#in this project we need use cvzone and MediaPipe\n",
    "\n",
    "#在OpenCV中HandDetector的功能是视频或者图像中对于手部手指以及关节关键点进行检测\n",
    "#HandDetector in OpenCV： Hand Keypoint detection is the process of finding the joints on the fingers as well as the finger-tips in a given image"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d15e46b",
   "metadata": {},
   "source": [
    "👇对于Midiapipe的功能和学习\n",
    "\n",
    "For MediaPipe:       https://google.github.io/mediapipe/solutions/hands.html"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f87a8e0b",
   "metadata": {},
   "source": [
    "👇对于cvzone的功能和学习\n",
    "\n",
    "For cvzone: \n",
    "Official website:     https://www.computervision.zone/\n",
    "Github:            https://github.com/cvzone "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cfc0124",
   "metadata": {},
   "source": [
    "# 1.1 手部识别 Hand Recognition"
   ]
  },
  {
   "cell_type": "raw",
   "id": "19e2de50",
   "metadata": {},
   "source": [
    "利用Markdown引用图片\n",
    "\n",
    "本地图片:\n",
    "![image.png](attachment:image.png) \n",
    "![图片加载失败后显示的文字](本地图片地址)\n",
    "\n",
    "网络图片：\n",
    "![Image name](https://h5.sinaimg.cn/upload/1005/526/2020/02/08/logo_20200208.png)\n",
    "![图片名称](图片地址)\n",
    "\n",
    "👇使用Markdown创建的图片 \n",
    "For this project we use point8\n",
    "Image link：         https://miro.medium.com/max/1400/1*fMBLvkdLbg0MEfv7KbJZjQ.png"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f04d22a",
   "metadata": {},
   "source": [
    "![Image name](https://miro.medium.com/max/1400/1*fMBLvkdLbg0MEfv7KbJZjQ.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b715b471",
   "metadata": {},
   "source": [
    "                                                    👇Hand Landmarks for this project👇"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4991b065",
   "metadata": {},
   "source": [
    "![Image name](https://i.328888.xyz/2023/03/15/JiY9z.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c508c23f",
   "metadata": {},
   "source": [
    "# 1.2 利用手指移动实现贪吃蛇游戏 Snake Game Realized By Finger Movement"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "240f0da2",
   "metadata": {},
   "source": [
    "![Image name](https://i.328888.xyz/2023/03/15/Ji1kb.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f654436",
   "metadata": {},
   "source": [
    "![Image name](https://i.328888.xyz/2023/03/15/JiPeV.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96f533c7",
   "metadata": {},
   "source": [
    "# 1.3 使用计算机视觉的贪吃蛇游戏 Snake Game Using Computer Vision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3344d181",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n",
      "20\n",
      "21\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n",
      "Yummy\n"
     ]
    }
   ],
   "source": [
    "cap = cv2.VideoCapture(0) \n",
    "# 创建视频对象，笔记本摄像头必须编号0，外接用编号2\n",
    "# To create a video object, the laptop camera must be numbered 0，external camera 2.\n",
    "\n",
    "# 注意在这个项目中的使用的是cap = cv2.VideoCapture(0)，而非是cap = cv2.VideoCapture(2)\n",
    "# In this project we use “cap = cv2.VideoCapture(0)” instead of “cap = cv2.VideoCapture(2)”\n",
    "\n",
    "cap.set(3, 1280) #长 Length\n",
    "cap.set(4, 720) #宽 Width\n",
    "\n",
    "detector = HandDetector(detectionCon=0.8, maxHands=1)\n",
    "# 因为maxHand=1所以屏幕中只识别一只手,当maxHand=2则识别两只手\n",
    "# Since we only need to recognize the fingertip movement of one hand in the screen, we use\"maxHand=1\"\n",
    "\n",
    "class SnakeGameClass:\n",
    "    def __init__(self, pathFood):\n",
    "    #详细可见课件15\n",
    "    # __init__是当你初始化一个对象时调用的一个方法，其行为类似于类的构造函数，每当创建类的对象时调用\n",
    "    # __init__ is the first method that is called when you initilaze an object\n",
    "    # self 用于访问属性数据，代表一个类的实例，需要访问类中的任何变量或方法\n",
    "    # self is used to access the attribue data. \n",
    "    # What is \"def __init__ self in Python： https://www.educative.io/answers/what-is-def-init-self-in-python\n",
    "\n",
    "        self.points = []\n",
    "        # 蛇的长度/身上所有点\n",
    "        # All points of the snake\n",
    "        self.lengths = []\n",
    "        # 每一个点之间的距离 \n",
    "        # Distance between each point\n",
    "        self.currentLength = 0\n",
    "        # 蛇的当前总长度 \n",
    "        # Total length of the snake\n",
    "        self.allowedLength = 150\n",
    "        # 蛇的最大允许长度为150，每当你吃到食物后它会加长\n",
    "        # Total allowed Length/maximum length\n",
    "        self.previousHead = 0, 0\n",
    "        #上一个蛇头的位置\n",
    "        # Previous head point\n",
    "\n",
    "        # 👆详细见图片1.2\n",
    "        # Details in picture 1.2\n",
    "\n",
    "        self.imgFood = cv2.imread(pathFood, cv2.IMREAD_UNCHANGED)\n",
    "        # cv2.IMREAD_UNCHANGED 读入完整图片，包括alpha通道 详细参考：https://blog.csdn.net/weixin_43593330/article/details/114685675\n",
    "        # 导入食物的图片, 因为我们需要导入的图片为png且透明背景，所以需要用到alpha通道，IMREAD_UNCHANGED获取带有alpha通道的图像\n",
    "        # Check here: https://docs.opencv.org/3.4/d8/d6a/group__imgcodecs__flags.html\n",
    "        # Import the food image\n",
    "        self.hFood, self.wFood, _ = self.imgFood.shape\n",
    "        # 判断食物的长宽，为食物图片本身的长宽\n",
    "        # The length and width of the picture are the length and width of the food when you trigger\n",
    "        self.foodPoint = 0, 0\n",
    "        # 食物的初始生成点为0，0\n",
    "        # initial point is 0，0\n",
    "        self.randomFoodLocation()\n",
    "        # 调用下面的def redomFoodLocation(self),随机食物的初始生成点\n",
    "        # redomFoodLocation\n",
    "        self.score = 0\n",
    "        # 初始分数为0\n",
    "        # The initial score is 0\n",
    "        self.gameOver = False\n",
    "        # 如果游戏结束为False\n",
    "\n",
    "    def randomFoodLocation(self):\n",
    "    # 随机食物的初始生成点\n",
    "    # Coordinate randomization of food\n",
    "        self.foodPoint = random.randint(150, 950), random.randint(150, 600)\n",
    "        #生成食物的范围 太靠近边缘无法检测手！\n",
    "        #x的范围随机值为(150, 950)，y的范围随机值为(150, 600)\n",
    "        #The random range of x is (150, 950),The random range of y is(150.600)\n",
    "\n",
    "    def update(self, imgMain, currentHead):\n",
    "    # 当前面使用了def __init__ (self, iD=\"\", N=\"\", etc..)，所以后面需要使用def update\n",
    "    # 详细可见：https://www.cnpython.com/qa/1170573\n",
    "\n",
    "        if self.gameOver:\n",
    "        #如果游戏结束\n",
    "            cvzone.putTextRect(imgMain, \"Game Over\", [300, 400],\n",
    "                               scale=7, thickness=5, offset=20)\n",
    "            #利用cvzone.putTextRect来显示游戏结束的提示字\n",
    "            cvzone.putTextRect(imgMain, f'Your Score: {self.score}', [300, 550],\n",
    "                               scale=7, thickness=5, offset=20)\n",
    "            #利用cvzone.putTextRect来显示玩家分数的提示字\n",
    "\n",
    "        else:\n",
    "        #否则\n",
    "            px, py = self.previousHead\n",
    "            # 前一个蛇头部xy值\n",
    "            # PreviousHead coordinates x and y\n",
    "            cx, cy = currentHead\n",
    "            # 目前的蛇头部的xy值，这里不加self是因为不从self中调用而是在update中调用\n",
    "            # CurrentHead coordinates x and y\n",
    "\n",
    "            self.points.append([cx, cy])\n",
    "            # 追加现有长度([cx,cy])\n",
    "            # Append is ([cx,cy])\n",
    "            distance = math.hypot(cx - px, cy - py)\n",
    "            # 计算距离，根号下(cx-px,cy-py)，计算斜边，勾股定理\n",
    "            # Get distance between previoushead and currenthead\n",
    "            # math.hypot: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\n",
    "            self.lengths.append(distance)\n",
    "            # 追加距离为增长长度\n",
    "            # Append distance\n",
    "            self.currentLength += distance\n",
    "            # python中“+=”有两个意思：1、两个值相加，返回值给符号左侧的变量，例如：a+=1，意思就是a=a+1。把变量a加上后边的1，再赋值给a; 2、用于字符串连接，变量值带引号，数据类型为字符串。\n",
    "            # 目前蛇的长度 = 目前(之前)长度 + 追加距离\n",
    "            # CurrentLength += append distance\n",
    "            self.previousHead = cx, cy\n",
    "            # 之后会返回 px, py = self.previousHead 这一步再次循环\n",
    "            # Back to \"px, py = self.previousHead\" step\n",
    "\n",
    "            # 长度缩减 Length Reduction\n",
    "            if self.currentLength > self.allowedLength:\n",
    "            # 如果当前长度大于允许的最大长度 \n",
    "                for i, length in enumerate(self.lengths):\n",
    "                    self.currentLength -= length\n",
    "                    # python中“-=”的意思为：-= 是减法赋值运算符。赋值运算符主要用于赋值操作，为对象赋值。减法赋值运算符可以在表达式中理解为 c -= a ，相当于 c = c - a\n",
    "                    # 减少长度\n",
    "                    self.lengths.pop(i)\n",
    "                    self.points.pop(i)\n",
    "                    if self.currentLength < self.allowedLength:\n",
    "                    # 如果减去后现在的长度小于最大允许长度，则不再循环执行\n",
    "                        break\n",
    "\n",
    "            # 检查蛇是否吃到了食物 Check if snake ate the Food\n",
    "            rx, ry = self.foodPoint\n",
    "            # 需要获取食物的位置\n",
    "            if rx - self.wFood // 2 < cx < rx + self.wFood // 2 and \\\n",
    "                    ry - self.hFood // 2 < cy < ry + self.hFood // 2:\n",
    "            # 如果 cx 同时满足 在 rx减去食物的长度 和 rx加上食物的宽度除以2之间 且 如果cy在 ry减去食物长度 和 ry加上食物的宽度除以2之间\n",
    "                self.randomFoodLocation()\n",
    "                # 蛇吃了食物后 食物随机生成在新坐标\n",
    "                # Food is randomly generated after being eaten by the snake\n",
    "                self.allowedLength += 50\n",
    "                # 允许增加的长度 每吃一个+50\n",
    "                # +50 length when the snake eats the food\n",
    "                self.score += 1\n",
    "                # 计分 每吃一个+1分\n",
    "                # When the snake eats the food, you get one point score\n",
    "                print(self.score)\n",
    "                # 输出分数\n",
    "                # show your score\n",
    "\n",
    "            # 画蛇 Draw Snake\n",
    "            if self.points:\n",
    "                for i, point in enumerate(self.points):\n",
    "                # enumerate的用法：https://blog.csdn.net/fanfangyu/article/details/124595937\n",
    "                    if i != 0:\n",
    "                    #如果i不等于0\n",
    "                        cv2.line(imgMain, self.points[i - 1], self.points[i], (0, 69, 255), 20)\n",
    "                        #这里的颜色是BGR\n",
    "                        #cv2.line画线(imgMain为显示在主视图上,self.points[i,-1]为第一个点,self.points[i]为第二个点,(187, 209, 201)为颜色,20为厚度)\n",
    "                        #cv2.line(image, start_point, end_point, color, thickness) \n",
    "                        #selfpoints[i - 1], self.points[i]为我们想要画线的两个端点\n",
    "                        # 颜色 #BBD1C9 的 RGB 值为(187,209,201) /弃用\n",
    "                        # 颜色 #FF4500 的 RGB 值为(255,69,0)\n",
    "                cv2.circle(imgMain, self.points[-1], 20, (0,255,223), cv2.FILLED)\n",
    "                #这里的颜色是BGR\n",
    "                #cv2.circle(img,pointIndex,20,(123,166,150),cv2.FILLED)，self.points[-1]为最后一个点\n",
    "                # cv2.circle为画圆形(img，pointIndex为圆心,20为半径,(123,166.150)为RGB,cv2.FILLED为填充)，食指位置处画圆，也就是蛇头处\n",
    "                # Syntax: cv2.circle(image, center_coordinates, radius, color, thickness)\n",
    "                # cv2.circle: https://www.geeksforgeeks.org/python-opencv-cv2-circle-method/\n",
    "                # 颜色 #7BA696 的 RGB 值为(123,166,150) /弃用\n",
    "                # 颜色 #DFFF00 的 RGB 值为(223,255,0)\n",
    "\n",
    "            # 画食物 Draw Food\n",
    "            imgMain = cvzone.overlayPNG(imgMain, self.imgFood,\n",
    "                                       (rx - self.wFood // 2, ry - self.hFood // 2))\n",
    "            # 如果使用imgMain = cvzone.overlayPNG(imgMain, self.imgFood,(rx,ry))的话，食物图片是在角落而不是在中心，而上面使用的rx - self.wFood // 2, ry - self.hFood // 2也就是长宽除以2\n",
    "            # 使用cvzone导入食物图像(imgMain为背景图像，self.imgFood为前面的图像)\n",
    "\n",
    "            cvzone.putTextRect(imgMain, f'Score: {self.score}', [50, 80],\n",
    "                               scale=3, thickness=3, offset=10)\n",
    "            # cv2.putText(imgMain, f'Score: {self.score}', (50,80), FONT_HERSHEY_SIMPLEX, 3, (0,255,0), 5)\n",
    "            # cv2.putText绘制文本图像(imgMain为图片，f'Score：{self.score得分}为添加的文字，[50,80]为左上角坐标，字体，字体大小，颜色，字体粗细\n",
    "            # cvzone.putTextRect(imgMain, f'Score: {self.score}', [50, 80],scale=3, thickness=3, offset=10)\n",
    "            # cv2.putText(image, text, org, font, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]])\n",
    "\n",
    "            # 检验碰撞 Check for Collision\n",
    "            # 需要把此部分置放于画食物和画蛇之后\n",
    "            pts = np.array(self.points[:-2], np.int32)\n",
    "            # points[:-2] 不取最后两点\n",
    "            pts = pts.reshape((-1, 1, 2))\n",
    "            cv2.polylines(imgMain, [pts], False, (0, 255, 0), 3)\n",
    "            # 不关闭所以是False\n",
    "            minDist = cv2.pointPolygonTest(pts, (cx, cy), True)\n",
    "            # 检验当前的xy是否击中了这些点中的任意一点，如果为True，则或在后面输出Yummy\n",
    "\n",
    "            if -1 <= minDist <= 1:\n",
    "                print(\"Yummy\")\n",
    "                #如果命中，则输出Yummy\n",
    "                self.gameOver = True\n",
    "                #如果游戏结束为True\n",
    "                #则执行重新开始，与开始部分内容相同\n",
    "                self.points = []  # all points of the snake\n",
    "                self.lengths = []  # distance between each point\n",
    "                self.currentLength = 0  # total length of the snake\n",
    "                self.allowedLength = 150  # total allowed Length\n",
    "                self.previousHead = 0, 0  # previous head point\n",
    "                self.randomFoodLocation()  # redom food location\n",
    "\n",
    "        return imgMain\n",
    "        # 返回画食物\n",
    "\n",
    "game = SnakeGameClass(\"C:/Users/78089/anaconda3/pics/Star.png\")\n",
    "#食物图片的路径，注意是用\"/\"而不是\"\\\"\n",
    "#food Image path\n",
    "\n",
    "while True:\n",
    "    success,img = cap.read()\n",
    "    # 读取 作用是提供框架\n",
    "    img = cv2.flip(img,1) \n",
    "    # 水平反转图片 与现实中的手的变化保持一致 更利于操作\n",
    "    # Flip the hand img to play the game without mirroring\n",
    "    hands,img = detector.findHands(img,flipType=False)\n",
    "    # 因为前一步骤的手部左右会识别错误（左手识别为右手，右手识别为左手），所以在这里使用flipType=False进行调整\n",
    "    # Because flip was used in the previous step, it will lead to wrong recognition of left and right hands (left hand is recognized as right hand), so use flipType=False here to fix it\n",
    "\n",
    "    if hands:\n",
    "        lmList = hands[0]['lmList']\n",
    "        # lmList: 具有通用模型的 Im 对象列表, List of Im Objects with a Common Model\n",
    "        # lmList: https://rdrr.io/cran/nlme/man/lmList.html\n",
    "        # hands[0]为第一只手\n",
    "        pointIndex = lmList[8][0:2]\n",
    "        # lmList[8]，为什么是数字8，可见于: 上面图表1.1 \n",
    "        # About lmList[8], you can check picture 1.1\n",
    "        # Hand recognition: https://medium.com/geekculture/computer-vision-using-mediapipe-c0933b743cf5\n",
    "        # 我们不需要处理3D，所以我们只需要xy两个坐标，所以只取两个值[0:2]，2不包含在其中，[0:2]中只包含0和1\n",
    "        img = game.update(img, pointIndex)\n",
    "        #\n",
    "    cv2.imshow(\"Image\",img)\n",
    "    #cv2.imshow(\"Image\",img)函数可以在窗口中显示图像\n",
    "    key = cv2.waitKey(1) \n",
    "    #cv2.waitKey(1) == ord('Key') 功能：等待键盘＇key＇键的输入参数：1:表示延时1ms切换到下一帧图像\n",
    "\n",
    "    if key == ord('r'):\n",
    "    # 如果按下\"r\",重新开始游戏\n",
    "    # Press\"r\" to reset the game\n",
    "        game.gameOver = False\n",
    "        # 重置游戏\n",
    "        # Reset game\n",
    "        \n",
    "    if cv2.waitKey(10) & 0xFF == ord('q'):\n",
    "    # 按下\"q\"关闭窗口\n",
    "    # Press\"q\" to close the window\n",
    "        break\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n",
    "#停止捕获视频和关闭相应的显示窗口"
   ]
  },
  {
   "cell_type": "raw",
   "id": "eb69a1b3",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
